2025.01.27 16:36:21.973697 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.01.27 16:36:22.075603 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 24.12.3.47 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.01.27 16:36:22.089962 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 115. DB::Exception: Setting allow_plaintext_password is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'mysql_user' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c131444
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007d4fe5c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000007d51afc
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x000000000f454658
4. DB::(anonymous namespace)::parseSettingsProfiles(Poco::Util::AbstractConfiguration const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x000000000f56fa64
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x000000000f56bf74
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x000000000f57ab3c
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000011f3fde0
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000011f3e828
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f573cf4
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x000000000f44ee34
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f451f4c
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f44d5ac
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000c37c234
14. Poco::Util::Application::run() @ 0x00000000141749fc
15. DB::Server::run() @ 0x000000000c36e918
16. Poco::Util::ServerApplication::run(int, char**) @ 0x000000001417dae8
17. mainEntryClickHouseServer(int, char**) @ 0x000000000c36be88
18. main @ 0x0000000007d4c41c
19. ? @ 0x00000000000273fc
20. ? @ 0x00000000000274cc
 (version 24.12.3.47 (official build))
2025.01.27 16:36:22.352756 [ 1 ] {} <Error> Application: Code: 115. DB::Exception: Setting allow_plaintext_password is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'mysql_user' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c131444
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007d4fe5c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000007d51afc
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x000000000f454658
4. DB::(anonymous namespace)::parseSettingsProfiles(Poco::Util::AbstractConfiguration const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x000000000f56fa64
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x000000000f56bf74
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x000000000f57ab3c
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000011f3fde0
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000011f3e828
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f573cf4
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x000000000f44ee34
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f451f4c
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f44d5ac
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000c37c234
14. Poco::Util::Application::run() @ 0x00000000141749fc
15. DB::Server::run() @ 0x000000000c36e918
16. Poco::Util::ServerApplication::run(int, char**) @ 0x000000001417dae8
17. mainEntryClickHouseServer(int, char**) @ 0x000000000c36be88
18. main @ 0x0000000007d4c41c
19. ? @ 0x00000000000273fc
20. ? @ 0x00000000000274cc
 (version 24.12.3.47 (official build))
2025.01.27 16:36:34.986303 [ 1 ] {} <Warning> Application: Integrity check of the executable skipped because the reference checksum could not be read.
2025.01.27 16:36:35.022590 [ 1 ] {} <Warning> Application: Listen [::]:9009 failed: Poco::Exception. Code: 1000, e.code() = 0, DNS error: EAI: Address family for hostname not supported (version 24.12.3.47 (official build)). If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>
2025.01.27 16:36:35.028021 [ 1 ] {} <Error> Application: Caught exception while setting up access control.: Code: 115. DB::Exception: Setting allow_plaintext_password is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'mysql_user' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c131444
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007d4fe5c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000007d51afc
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x000000000f454658
4. DB::(anonymous namespace)::parseSettingsProfiles(Poco::Util::AbstractConfiguration const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x000000000f56fa64
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x000000000f56bf74
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x000000000f57ab3c
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000011f3fde0
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000011f3e828
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f573cf4
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x000000000f44ee34
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f451f4c
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f44d5ac
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000c37c234
14. Poco::Util::Application::run() @ 0x00000000141749fc
15. DB::Server::run() @ 0x000000000c36e918
16. Poco::Util::ServerApplication::run(int, char**) @ 0x000000001417dae8
17. mainEntryClickHouseServer(int, char**) @ 0x000000000c36be88
18. main @ 0x0000000007d4c41c
19. ? @ 0x00000000000273fc
20. ? @ 0x00000000000274cc
 (version 24.12.3.47 (official build))
2025.01.27 16:36:35.323431 [ 1 ] {} <Error> Application: Code: 115. DB::Exception: Setting allow_plaintext_password is neither a builtin setting nor started with the prefix 'SQL_' registered for user-defined settings: while parsing profile 'mysql_user' in users configuration file: while loading configuration file '/etc/clickhouse-server/users.xml'. (UNKNOWN_SETTING), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c131444
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007d4fe5c
2. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000007d51afc
3. DB::AccessControl::CustomSettingsPrefixes::checkSettingNameIsAllowed(std::basic_string_view<char, std::char_traits<char>>) const @ 0x000000000f454658
4. DB::(anonymous namespace)::parseSettingsProfiles(Poco::Util::AbstractConfiguration const&, std::unordered_set<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>, std::hash<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::equal_to<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>, std::allocator<StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>>> const&, DB::AccessControl const&) @ 0x000000000f56fa64
5. DB::UsersConfigAccessStorage::parseFromConfig(Poco::Util::AbstractConfiguration const&) @ 0x000000000f56bf74
6. void std::__function::__policy_invoker<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>::__call_impl<std::__function::__default_alloc_func<DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&)::$_0, void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>>(std::__function::__policy_storage const*, Poco::AutoPtr<Poco::Util::AbstractConfiguration>&&, bool) @ 0x000000000f57ab3c
7. DB::ConfigReloader::reloadIfNewer(bool, bool, bool, bool) @ 0x0000000011f3fde0
8. DB::ConfigReloader::ConfigReloader(std::basic_string_view<char, std::char_traits<char>>, std::vector<String, std::allocator<String>> const&, String const&, zkutil::ZooKeeperNodeCache&&, std::shared_ptr<Poco::Event> const&, std::function<void (Poco::AutoPtr<Poco::Util::AbstractConfiguration>, bool)>&&) @ 0x0000000011f3e828
9. DB::UsersConfigAccessStorage::load(String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f573cf4
10. DB::AccessControl::addUsersConfigStorage(String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&, bool) @ 0x000000000f44ee34
11. DB::AccessControl::addStoragesFromUserDirectoriesConfig(Poco::Util::AbstractConfiguration const&, String const&, String const&, String const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f451f4c
12. DB::AccessControl::setupFromMainConfig(Poco::Util::AbstractConfiguration const&, String const&, std::function<std::shared_ptr<zkutil::ZooKeeper> ()> const&) @ 0x000000000f44d5ac
13. DB::Server::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000c37c234
14. Poco::Util::Application::run() @ 0x00000000141749fc
15. DB::Server::run() @ 0x000000000c36e918
16. Poco::Util::ServerApplication::run(int, char**) @ 0x000000001417dae8
17. mainEntryClickHouseServer(int, char**) @ 0x000000000c36be88
18. main @ 0x0000000007d4c41c
19. ? @ 0x00000000000273fc
20. ? @ 0x00000000000274cc
 (version 24.12.3.47 (official build))
